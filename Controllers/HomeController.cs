using Mvc_JqGrid1.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using Trirand.Web.Mvc;

namespace Mvc_JqGrid1.Controllers
{
    public class HomeController : Controller
    {
        public ActionResult Index()
        {
            ViewBag.Message = "Modify this template to jump-start your ASP.NET MVC application.";
            //sasdasda
            return View();
        }

        public ActionResult About()
        {
            ViewBag.Message = "Your app description page.";

            return View();
        }

        public ActionResult Contact()
        {
            ViewBag.Message = "Your contact page.";

            return View();
        }

        public ActionResult GridDemo()
        {
            // Get the model (setup) of the grid defined in the /Models folder.
            var gridModel = new OrdersJqGridModel();
            var ordersGrid = gridModel.OrdersGrid;

            // customize the default Orders grid model with custom settings
            // NOTE: you need to call this method in the action that fetches the data as well,
            // so that the models match
            SetUpGrid(ordersGrid);

            // Pass the custmomized grid model to the View
            return View(gridModel);
        }

        private void SetUpGrid(JQGrid ordersGrid)
        {
            // Customize/change some of the default settings for this model
            // ID is a mandatory field. Must by unique if you have several grids on one page.
            ordersGrid.ID = "OrdersGrid";
            // Setting the DataUrl to an action (method) in the controller is required.
            // This action will return the data needed by the grid
            ordersGrid.DataUrl = Url.Action("SearchGridDataRequested");
            ordersGrid.EditUrl = Url.Action("EditOrder");
            // show the search toolbar
            ordersGrid.ToolBarSettings.ShowSearchToolBar = true;
            ordersGrid.Columns.Find(c => c.DataField == "OrderID").Searchable = false;
            ordersGrid.Columns.Find(c => c.DataField == "OrderDate").Searchable = false;
            ordersGrid.Columns.Find(c => c.DataField == "CustomerID").Searchable = false;
            ordersGrid.Columns.Find(c => c.DataField == "Freight").Searchable = false;
            ordersGrid.Columns.Find(c => c.DataField == "ShipName").Searchable = false;

            //InLine Editing tools.
            ordersGrid.Columns.Insert(0, new JQGridColumn
            {
                EditActionIconsColumn = true,
                EditActionIconsSettings = new EditActionIconsSettings
                {
                    SaveOnEnterKeyPress = true
                },
                HeaderText = "Edit Actions",
                Width = 50,
                Searchable = false
            });

            JQGridColumn orderDateColumn = ordersGrid.Columns.Find(c => c.DataField == "OrderDate");
            //orderDateColumn.EditType = EditType.DatePicker;
            //orderDateColumn.EditorControlID = "DatePicker";
            orderDateColumn.Width = 100;
            orderDateColumn.EditType = EditType.Custom;
            orderDateColumn.EditTypeCustomCreateElement = "createOrderDateEditElement";
            orderDateColumn.EditTypeCustomGetValue = "getOrderDateElementValue";
            
            //SetUpCustomerIDSearchDropDown(ordersGrid);
            //SetUpFreightSearchDropDown(ordersGrid);
            //SetShipNameSearchDropDown(ordersGrid);

            ordersGrid.ToolBarSettings.ShowEditButton = true;
            ordersGrid.ToolBarSettings.ShowAddButton = true;
            ordersGrid.ToolBarSettings.ShowDeleteButton = true;
            ordersGrid.EditDialogSettings.CloseAfterEditing = true;
            ordersGrid.AddDialogSettings.CloseAfterAdding = true;

            // setup the dropdown values for the CustomerID editing dropdown
            //SetUpCustomerIDEditDropDown(ordersGrid);
        }

        public JsonResult SearchGridDataRequested()
        {
            // Get both the grid Model and the data Model
            // The data model in our case is an autogenerated linq2sql database based on Northwind.
            var gridModel = new OrdersJqGridModel();
            var northWindModel = new NorthWindEntities();

            // customize the default Orders grid model with our custom settings
            SetUpGrid(gridModel.OrdersGrid);

            // return the result of the DataBind method, passing the datasource as a parameter
            // jqGrid for ASP.NET MVC automatically takes care of paging, sorting, filtering/searching, etc
            return gridModel.OrdersGrid.DataBind(northWindModel.Orders);
        }

        public void EditOrder(Order editedOrder)
        {
            // Get the grid and database (northwind) models
            var gridModel = new OrdersJqGridModel();
            var northWindModel = new NorthWindEntities();

            // If we are in "Edit" mode, get the Order from database that matches the edited order
            // Check for "Edit" mode this way, we can also be in "Delete" or "Add" mode as well in this method
            if (gridModel.OrdersGrid.AjaxCallBackMode == AjaxCallBackMode.EditRow)
            {
                // Get the data from and find the Order corresponding to the edited row
                //List gridData = GetOrders();
                Order orderToUpdate = northWindModel.Orders.Single(o => o.OrderID == editedOrder.OrderID);

                // Update the Order information to match the edited Order data
                // In this demo we do not need to update the database since we are using Session
                // In your case you may need to actually hit the database
                orderToUpdate.OrderDate = editedOrder.OrderDate;
                orderToUpdate.CustomerID = editedOrder.CustomerID;
                orderToUpdate.Freight = editedOrder.Freight;
                orderToUpdate.ShipName = editedOrder.ShipName;

                // This will save the changes into the database. We have commented this since this is just an online demo
                //northWindModel.SaveChanges();
            }
            else if (gridModel.OrdersGrid.AjaxCallBackMode == AjaxCallBackMode.DeleteRow)
            {
                // Get the data from and find the Order corresponding to the edited row
                //List gridData = GetOrders();
                Order orderToUpdate = northWindModel.Orders.Single(o => o.OrderID == editedOrder.OrderID);

                // This will save the changes into the database. We have commented this since this is just an online demo
                //northWindModel.SaveChanges();
            }
        }
    }
}
